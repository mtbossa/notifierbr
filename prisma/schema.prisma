generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HtmlsSelectors {
  id                 Int     @default(autoincrement())
  price              String?
  stock_availability String?
  store_id           Int
  store              Store   @relation(fields: [store_id], references: [id], onDelete: Cascade)

  @@id([id, store_id])
  @@map("html_selectors")
}

model Monitor {
  id       Int                  @id @default(autoincrement())
  type     String               @unique @db.VarChar(100)
  products MonitorsOnProducts[]

  @@map("monitors")
}

model MonitorsOnProducts {
  monitors_id Int
  products_id BigInt
  store_id    Int?
  id          BigInt  @default(autoincrement())
  monitor     Monitor @relation(fields: [monitors_id], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [products_id], references: [id], onDelete: Cascade)
  store       Store?  @relation(fields: [store_id], references: [id])

  @@id([products_id, monitors_id, id])
  @@map("monitors_products")
}

model Product {
  id                   BigInt               @id @default(autoincrement())
  name                 String               @db.VarChar
  brand                String               @db.VarChar
  style_code           String?              @unique @db.VarChar
  release_date         DateTime?            @db.Date
  current_lowest_price Decimal?             @db.Decimal(12, 2)
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  monitors             MonitorsOnProducts[]
  stores               ProductsOnStore[]

  @@map("products")
}

model ProductsOnStore {
  products_id   BigInt
  stores_id     Int
  product_url   String   @unique
  current_price Decimal? @db.Decimal(12, 2)
  id            BigInt   @default(autoincrement())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  product       Product  @relation(fields: [products_id], references: [id], onDelete: Cascade)
  store         Store    @relation(fields: [stores_id], references: [id], onDelete: Cascade)

  @@id([products_id, stores_id, id])
  @@map("products_stores")
}

model Store {
  id                Int                  @id @default(autoincrement())
  name              String               @unique @db.VarChar(255)
  url               String               @unique @db.VarChar(255)
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  html_selectors    HtmlsSelectors[]
  monitors_products MonitorsOnProducts[]
  products          ProductsOnStore[]

  @@map("stores")
}
